name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

## We specify a concurrency group with automated cancellation. This means that
## other pushes on the same `github.ref` (eg. other pushes to the same pull
## request) cancel previous occurrences of the CI.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@V28
        with:
          extra_nix_config: |
            accept-flake-config = true
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v16
        with:
          name: dancelor
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      ## The following tests that the development Shell builds properly, but
      ## also it build most of the things that aren't relevant to building
      ## Dancelor. This makes the Actions' feedback more precise.
      - name: Build Nix development Shell
        run: nix build .#devShells.x86_64-linux.default -vL --no-link

      - name: Build (and run unit tests)
        run: nix build .#packages.x86_64-linux.dancelor -vL --no-link

      - name: Build documentation
        run: nix build .#packages.x86_64-linux.documentation -vL --out-link doc

      - name: Run integration tests
        run: nix build .#checks.x86_64-linux.integration -vL --no-link

      - name: Upload GitHub pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: doc/

  deploy-documentation:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    ## Grant GITHUB_TOKEN the permissions required to make a Pages deployment.
    ## It needs to be able to deploy to pages and to verify that the deployment
    ## originates from an appropriate source.
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Deploy to GitHub pages
        uses: actions/deploy-pages@v4

  run-nix-flake-checks:
    name: Run Nix flake checks
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@V28
        with:
          extra_nix_config: |
            accept-flake-config = true
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Nix caches
        uses: cachix/cachix-action@v16
        with:
          name: dancelor
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Run flake checks
        run: nix flake check --print-build-logs
