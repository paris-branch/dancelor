################################################################################
##          _ _   _      _           _             _
##     __ _(_) |_| |__ _| |__ ___ __(_) _  _ _ __ | |
##   _/ _` | |  _| / _` | '_ \___/ _| || || | '  \| |
##  (_)__, |_|\__|_\__,_|_.__/   \__|_(_)_, |_|_|_|_|
##    |___/                             |__/

## Run on the Shell executor specifically
##
default:
  tags: [shell]

## Only run the workflow for pushes to branches. This matters at least for the
## test in `pages` to make sense.
##
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH'

## Split everything in four stages, described extensively below. FIXME: add a
## fifth stage for cleanup.
##
stages:
  - base
  - build
  - test
  - deploy

################################################################################
##   ___
##  | _ ) __ _ ___ ___
##  | _ \/ _` (_-</ -_)
##  |___/\__,_/__/\___|
##
##  The `base` stage contains things that do not really have to do with Dancelor
##  itself: it sets up the base Docker image and the dependencies. It should
##  basically always be in the Docker cache, unless we make a substential change
##  to Dancelor.

base:
  stage: base
  needs: []
  script:
    - docker build --tag dancelor_base --target base .

deps:
  stage: base
  needs: [base]
  script:
    - docker build --tag dancelor_deps --target deps .

files:
  stage: base
  needs: [base]
  script:
    - docker build --tag dancelor_files --target files .

################################################################################
##   ___      _ _    _
##  | _ )_  _(_) |__| |
##  | _ \ || | | / _` |
##  |___/\_,_|_|_\__,_|
##
##  We build Dancelor and its documentation. This stage can be quite long but it
##  should always pass, provided we compiled locally before pushing.

build:
  stage: build
  needs: [deps]
  script:
    - docker build --tag dancelor_build --target build .

doc:
  stage: build
  needs: [build]
  script:
    - docker run --cidfile build-doc.cid dancelor_build opam exec -- make doc
    - docker cp --follow-link $(cat build-doc.cid):/wd/doc documentation
  artifacts:
    paths:
      - documentation

################################################################################
##   _____       _
##  |_   _|__ __| |_
##    | |/ -_|_-<  _|
##    |_|\___/__/\__|
##
##  This is where most error are caught. This stage involves running the tests
##  included in Dancelor, but it also checks for synchronisation of `.opam`
##  files with `dune-project`, for style, etc. Those last examples actually
##  still work if the build stage failed because they only depend on the files.

test:
  stage: test
  needs: [build]
  script:
    - docker run dancelor_build opam exec -- make test

indent:
  stage: test
  needs: [files]
  script:
    - docker run dancelor_files ci/indent.sh

opam-lint:
  stage: test
  needs: [files]
  script:
    - docker run dancelor_files ci/opam-lint.sh

opam-diff:
  stage: test
  needs: [files]
  script:
    - docker run dancelor_files ci/opam-diff.sh

################################################################################
##   ___           _
##  |   \ ___ _ __| |___ _  _
##  | |) / -_) '_ \ / _ \ || |
##  |___/\___| .__/_\___/\_, |
##           |_|         |__/
##
##  If everything else is green, we can deploy various objects, including the
##  documentation and (FIXME) Dancelor itself. Note that, at this point, the
##  deployment of documentation seems rather dull and could be taken care of by
##  the `doc` job. But this one only runs if everything else ran correctly, and
##  there will also be some extra stuff done in there.

pages:
  stage: deploy
  needs: [doc]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: on_success
  script:
    - mv documentation public
  artifacts:
    paths:
      - public
