open Nes
open Js_of_ocaml
open Dancelor_common
open Dancelor_client_elements
open Dancelor_client_model
module Formatters = Dancelor_client_formatters

let js = Js.string

type t =
  {
    page : Page.t;
    content : Dom_html.divElement Js.t;
    table : Table.t;
  }

let display_warnings warnings =
  let open Dancelor_client_html in
  let display_times n =
    if n = 1 then []
    else [text const " ("; text const (Int.to_english_string_times n); text const ")"]
  in
  let rec display_sets = function
    | [] -> []
    | (None, n) :: tl ->
      ([text const "standalone"] @ display_times n)
      :: display_sets tl
    | (Some set, n) :: tl ->
      ([text const "in “"; span lwt (Formatters.Set.name set); text const "”"] @ display_times n)
      :: display_sets tl
  in
  let rec format_set_list = function
    (* If the warning DuplicateVersion has been logged, the list of sets,
       and hence of html nodes generated by [display_sets] above is never empty *)
    | [] -> assert false
    | [hd] -> hd @ [text const "."]
    | hd::tl -> hd @ [text const ", "] @ format_set_list tl
  in
  let display_warning warning =
    match warning with
    | Book.Empty ->
      li const [text const "This book does not contain any set"]
    | Book.DuplicateSet set ->
      li const [
        text const "Set “";
        span lwt (Formatters.Set.name set);
        text const "” appears several times in this book."
      ]
    | Book.DuplicateVersion (tune, sets_opt) ->
      li const (
        text const "Tune “"
        :: span lwt (Formatters.Tune.name tune)
        :: text const "” appears several times: "
        :: (display_sets sets_opt |> format_set_list)
      )
    | Book.SetDanceMismatch (set, dance) ->
      li const [
        text const "Set “";
        span lwt (Formatters.Set.name set);
        text const "” does not have the same kind as its associated dance “";
        span lwt (Formatters.Dance.name dance);
        text const "”."
      ]
  in
  List.map display_warning warnings

let display_contents t contents =
  let rows =
    List.map
      (function
        | Book.Set (set, parameters) ->
          (
            let slug = Set.slug set in
            let href =
              let%lwt slug = slug in
              Lwt.return PageRouter.(path (Set slug))
            in
            let cells =
              let open Lwt in
              [
                Table.Cell.text ~text:(Lwt.return "Set") t.page;
                Table.Cell.create ~content:(
                  let%lwt content = Formatters.Set.name_tunes_and_dance ~link:false set parameters in
                  Lwt.return (Dancelor_client_html.nodes_to_dom_nodes (Page.document t.page) content)
                ) t.page;
                Table.Cell.text ~text:(Set.kind set >|= Kind.Dance.to_string) t.page
              ]
            in
            Table.Row.create ~href ~cells t.page
          )

        | InlineSet (set, parameters) ->
          (
            let cells =
              let open Lwt in [
                Table.Cell.text ~text:(Lwt.return "Set (inline)") t.page;
                Table.Cell.create ~content:(
                  let%lwt content = Formatters.Set.name_tunes_and_dance ~link:false set parameters in
                  Lwt.return (Dancelor_client_html.nodes_to_dom_nodes (Page.document t.page) content)
                ) t.page;
                Table.Cell.text ~text:(Set.kind set >|= Kind.Dance.to_string) t.page
              ]
            in
            Table.Row.create ~cells t.page
          )

        | Version (version, parameters) ->
          (
            let slug = Version.slug version in
            let href =
              let%lwt slug = slug in
              Lwt.return PageRouter.(path (Version slug))
            in
            let cells = [
              Table.Cell.text ~text:(Lwt.return "Tune") t.page;
              Table.Cell.create ~content:(
                let%lwt content = Formatters.Version.name_and_dance ~link:false version parameters in
                Lwt.return (Dancelor_client_html.nodes_to_dom_nodes (Page.document t.page) content)
              ) t.page;
              Table.Cell.text ~text:(
                let%lwt tune = Version.tune version in
                let%lwt kind = Tune.kind tune in
                let%lwt bars = Version.bars version in
                let kind = (bars, kind) in
                Lwt.return (Kind.Version.to_string kind)
              ) t.page
            ]
            in
            Table.Row.create ~href ~cells t.page
          )
      )
      contents
    |> Lwt.return
  in
  let section = Table.Section.create ~rows t.page in
  Table.replace_bodies t.table (Lwt.return [section])

let create slug page =
  let document = Page.document page in
  let content = Dom_html.createDiv document in
  let book_lwt = Book.get slug in

  Lwt.async (fun () ->
      let%lwt book = book_lwt in
      let%lwt title = Book.title book in
      document##.title := js (title ^ " | Book | Dancelor");
      Lwt.return ()
    );


  let header =
    Table.Row.create
      ~cells:[
        Table.Cell.header_text ~text:(Lwt.return "Type") page;
        Table.Cell.header_text ~text:(Lwt.return "Name") page;
        Table.Cell.header_text ~text:(Lwt.return "Kind") page;
      ]
      page
  in
  let ttable = Table.create
      ~header
      ~kind:Table.Kind.Separated
      page
  in

  Dancelor_client_html.(append_nodes (content :> dom_node) (Page.document page) [
      h2 ~classes:["title"] const [text lwt (book_lwt >>=| Book.title)];
      h3 ~classes:["title"] const [text lwt (book_lwt >>=| Book.subtitle)];
      div lwt (
        match%lwt book_lwt >>=| Book.scddb_id with
        | None -> Lwt.return_nil
        | Some scddb_id ->
          let href = SCDDB.list_uri scddb_id in
          Lwt.return [
            h3 ~classes:["title"] const [
              a ~href ~target:Blank const [text const "Link to the Strathspey Database"]
            ]
          ]
      );

      div lwt
        (* Only open a warnings div if there are warnings *)
        (match%lwt book_lwt >>=| Book.warnings with
         | [] -> Lwt.return []
         | warnings -> Lwt.return [div ~classes:["warning"] const [
             ul const (display_warnings warnings)
           ]]);

      p const [text lwt (
          let%lwt book = book_lwt in
          let%lwt date = Book.date book in
          match date with
          | None -> Lwt.return ""
          | Some date -> Lwt.return (spf "Date: %s" (NesPartialDate.to_pretty_string date))
        )];

      div ~classes:["buttons"] const (
        let booklet_parameters =
          BookParameters.(
            make
              ~front_page:true
              ~table_of_contents:End
              ~two_sided:true
              ~every_set:SetParameters.(
                  make
                    ~forced_pages:2
                    ()
                )
              ()
          )
        in
        let bass_parameters =
          BookParameters.(
            make ~every_set:SetParameters.(
                make ~every_version:VersionParameters.(
                    make
                      ~clef:Music.Bass
                      ~transposition:(Relative(Music.pitch_c, Music.make_pitch C Natural (-1)))
                      ()
                  )
                  ()
              )
              ()
          )
        in
        let b_parameters = BookParameters.make_instrument (Music.make_pitch B Flat (-1)) in
        let e_parameters = BookParameters.make_instrument (Music.make_pitch E Flat 0) in

        let c_pdf_href,         b_pdf_href,         e_pdf_href,         bass_pdf_href,
            c_booklet_pdf_href, b_booklet_pdf_href, e_booklet_pdf_href, bass_booklet_pdf_href =
          ApiRouter.(path @@ bookPdf slug @@ Option.none),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@                           b_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@                           e_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@                        bass_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@                                        booklet_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@ BookParameters.compose    b_parameters booklet_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@ BookParameters.compose    e_parameters booklet_parameters),
          ApiRouter.(path @@ bookPdf slug @@ Option.some @@ BookParameters.compose bass_parameters booklet_parameters)
        in

        let pdf_button href txt =
          a ~classes:["button"] ~href ~target:Blank const [
            i ~classes:["fas"; "fa-file-pdf"] const [];
            text const (" " ^ txt)
          ]
        in
        [
          pdf_button c_pdf_href    "PDF";
          pdf_button b_pdf_href    "PDF (B♭)";
          pdf_button e_pdf_href    "PDF (E♭)";
          pdf_button bass_pdf_href "PDF (𝄢)";
          br;
          pdf_button c_booklet_pdf_href    "PDF (book)";
          pdf_button b_booklet_pdf_href    "PDF (B♭, book)";
          pdf_button e_booklet_pdf_href    "PDF (E♭, book)";
          pdf_button bass_booklet_pdf_href "PDF (𝄢, book)";
        ]
      );

      div ~classes:["section"] const [
        h3 const [text const "Contents"];

        node_of_dom_node (Table.root ttable :> dom_node)
      ];

      div ~classes:["buttons"] const (
        let href = PageRouter.(path (BookEdit slug)) in
        [a ~classes:["button"] ~href const [text const ("Edit book")]]
      )
    ]);

  let t = {page; content; table=ttable} in
  Lwt.on_success book_lwt (fun prog -> Lwt.on_success (Book.contents prog) (display_contents t));
  t

let contents t =
  t.content

let init t =
  ignore t

let refresh t =
  ignore t
