open Nes
open Common
open Model

let display_warnings warnings =
  let open Html in
  let display_times n =
    if n = 1 then []
    else [txt " ("; txt (Int.to_english_string_times n); txt ")"]
  in
  let rec display_sets = function
    | [] -> []
    | (None, n) :: tl ->
      ([txt "standalone"] @ display_times n) :: display_sets tl
    | (Some set, n) :: tl ->
      ([txt "in “"; Formatters.Set.name' set; txt "”"] @ display_times n) :: display_sets tl
  in
  let rec format_set_list = function
    (* If the warning DuplicateVersion has been logged, the list of sets,
       and hence of html nodes generated by [display_sets] above is never empty *)
    | [] -> assert false
    | [hd] -> hd @ [txt "."]
    | hd :: tl -> hd @ [txt ", "] @ format_set_list tl
  in
  let display_warning warning =
    match warning with
    | Book.Empty ->
      li [txt "This book does not contain any set"]
    | Book.DuplicateSet set ->
      li [txt "Set “"; Formatters.Set.name' set; txt "” appears several times in this book."]
    | Book.DuplicateVersion (tune, sets_opt) ->
      li
        (
          txt "Tune “" :: Formatters.Tune.name' tune :: txt "” appears several times: " :: (display_sets sets_opt |> format_set_list)
        )
    | Book.SetDanceMismatch (set, dance) ->
      li [txt "Set “"; Formatters.Set.name' set; txt "” does not have the same kind as its associated dance “"; Formatters.Dance.name' dance; txt "”."]
  in
  List.map display_warning warnings

let table_contents ~this_id contents =
  let open Html in
  tablex
    ~a: [a_class ["table"; "table-striped"; "table-hover"; "table-borderless"; "my-2"]]
    ~thead: (
      thead
        ~a: [a_class ["table-primary"]]
        [
          tr
            [
              th [txt "Type"];
              th [txt "Name"];
              th [txt "Kind"];
              th [txt "By"];
            ]
        ]
    )
    [
      tbody
        (
          List.mapi
            (fun index page ->
              let context = Endpoints.Page.inbook this_id index in
              match page with
              | Book.Set (set, parameters) ->
                (
                  let href = Endpoints.Page.href_set ~context @@ Entry.id set in
                  Tables.clickable_row ~href [
                    lwt [txt "Set"];
                    lwt [Formatters.Set.name_tunes_and_dance' ~name_link: false set parameters];
                    lwt [txt @@ Kind.Dance.to_string @@ Set.kind' set];
                    lwt [Formatters.Set.conceptors' ~short: true set];
                  ]
                )
              | Version (version, parameters) ->
                (
                  let href = Endpoints.Page.href_version ~context @@ Entry.id version in
                  Tables.clickable_row ~href [
                    lwt [txt "Tune"];
                    lwt [Formatters.Version.name_and_dance' ~name_link: false version parameters];
                    (
                      let%lwt tune = Version.tune' version in
                      lwt [txt @@ Kind.Version.to_string (Version.bars' version, Tune.kind' tune)]
                    );
                    lwt [Formatters.Version.composer_and_arranger' ~short: true version]
                  ]
                )
            )
            contents
        )
    ]

open Html

let create ?context id =
  MainPage.madge_call_or_404 (Book Get) id @@ fun book ->
  Page.make'
    ~parent_title: "Book"
    ~before_title: [
      Components.ContextLinks.make_and_render
        ?context
        ~this_page: (Endpoints.Page.href_book id)
        (lwt @@ Any.book book);
    ]
    ~title: (lwt @@ Book.title' book)
    ~subtitles: [
      txt (Book.subtitle' book);
      Formatters.Book.date_and_editors' book;
    ]
    ~share: (Book book)
    ~actions: (
      lwt @@
      [Utils.Button.make
        ~classes: ["dropdown-item"]
        ~onclick: (fun _ -> ignore <$> BookDownloadDialog.create_and_open book)
        ~icon: "file-pdf"
        ~label: "Download PDF"
        ();
      Utils.Button.make_a
        ~classes: ["dropdown-item"]
        ~href: (S.const @@ Endpoints.Page.(href BookEdit) id)
        ~icon: "pencil-square"
        ~label: "Edit"
        ()] @ (
        match Book.scddb_id' book with
        | None -> []
        | Some scddb_id ->
          [
            a
              ~a: [
                a_class ["dropdown-item"];
                a_href (Uri.to_string @@ SCDDB.publication_uri scddb_id);
              ]
              [
                i ~a: [a_class ["bi"; "bi-box-arrow-up-right"]] [];
                txt " See on SCDDB";
              ]
          ]
      )
    )
    [
      R.div
        (
          S.from' [] @@
            match%lwt Book.warnings book with
            | [] -> lwt_nil
            | warnings -> lwt [div ~a: [a_class ["alert"; "alert-warning"]] [ul ~a: [a_class ["mb-0"]] (display_warnings warnings)]]
        );
      div
        ~a: [a_class ["section"]]
        [
          h3 [txt "Contents"];
          R.div (
            S.from' (Tables.placeholder ()) @@
              let%lwt contents = Book.contents' book in
              lwt [table_contents ~this_id: id contents]
          )
        ];
    ]
